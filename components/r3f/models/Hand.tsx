/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useState, forwardRef, FC, useRef } from "react";
import { MeshWobbleMaterial, useGLTF } from "@react-three/drei";
import { MotionValue, useSpring, useTransform } from "framer-motion";
import { GLTF } from "three-stdlib";
import { MeshProps, ThreeElements, useFrame } from "@react-three/fiber";
import { BufferGeometry, Euler, Group, Material, Mesh, Vector3 } from "three";

const transitionDuration = 2.75;

interface Props {
  scrollY: MotionValue<number>;
  isContinued: boolean;
}

const Hand: FC<Props> = ({ scrollY, isContinued }) => {
  const { nodes, materials }: GLTF = useGLTF("/assets/models/hand.glb");
  const handRef = useRef<Group>(null);
  const _posX = useSpring(
    useTransform<number, number>(
      scrollY,
      [1.75, 1.9, 3.25, 3.75],
      [3, 0.9, 0.9, 12]
    ),
    {
      stiffness: 600,
      damping: 30,
    }
  );
  const _posY = useSpring(
    useTransform<number, number>(
      scrollY,
      [1.75, 1.9, 3.25, 3.75],
      [-3.1, -4, -4, -3.1]
    ),
    {
      stiffness: 600,
      damping: 30,
    }
  );
  const _rotX: MotionValue<number> = useSpring(
    useTransform<number, number>(
      scrollY,
      [1.75, 1.9, 3.25, 3.75],
      [0, -3.14 / 4 + 0.7, -3.14 / 4 + 0.7, 0]
    ),
    {
      stiffness: 600,
      damping: 30,
    }
  );
  const _rotY: MotionValue<number> = useSpring(
    useTransform<number, number>(
      scrollY,
      [1.75, 1.9, 3.25, 3.75],
      [3.14, 3.14 * 1.5, 3.14 * 1.5, 3.14]
    ),
    {
      stiffness: 600,
      damping: 30,
    }
  );
  const _rotZ = useSpring(
    useTransform<number, number>(
      scrollY,
      [1.75, 1.9, 3.25, 3.75],
      [0, 0, 0, 0]
    ),
    {
      stiffness: 600,
      damping: 30,
    }
  );

  //Change the motion values from static to dynamic when the scene is clicked
  useEffect(() => {
    if (!isContinued) {
      _posX.set(4);
      _posY.set(-3);
      _rotX.set(0);
      _rotY.set(3.14);
      _rotZ.set(-0.6);
    } else {
      _posX.set(3.2);
      _posY.set(-3.25);
      _rotX.set(0);
      _rotY.set(3.14);
      _rotZ.set(0);
    }
  }, [isContinued]);

  useFrame((state, delta, frame) => {
    if (!handRef.current) return;
    handRef.current.position.set(_posX.get(), _posY.get(), 0);
    handRef.current.rotation.set(_rotX.get(), _rotY.get(), _rotZ.get(), "XYZ");
  });

  return (
    <>
      <group dispose={null} scale={8} ref={handRef}>
        <mesh
          geometry={nodes.Plane005.geometry}
          material={materials["Material #46"]}
          position={[-3.73, -1.01, 0.78]}
          // position={[3, -1.01, 0]}
          rotation={[-1.59, 0.88, -2.75]}
          scale={0.01}
          castShadow
          receiveShadow
        >
          <MeshWobbleMaterial
            attach="material"
            factor={0.00075}
            speed={3}
            color="#b2a99b"
          />
        </mesh>
      </group>
      {/* {!transitionComplete && (
        <group
          scale={8}
          ref={ref}
          dispose={null}
          // initial="holdingWord"
          // animate={isContinued ? "holding" : "holdingWord"}
          // variants={{
          //   holdingWord: {
          //     rotateY: 3.14,
          //     rotateZ: -0.6,
          //     x: 4,
          //     y: -3,
          //     z: 0,
          //   },
          //   holding: {
          //     rotateX: 0,
          //     rotateY: 3.14,
          //     rotateZ: 0,
          //     x: 3.2,
          //     y: -3.25,
          //     z: 0,
          //     transition: {
          //       duration: transitionDuration + 2,
          //     },
          //   },
          // }}
          // onAnimationComplete={(e) => {
          //   if (isContinued) setTransitionComplete(true);
          //   handleAnimationComplete(e);
          // }}
        >
          <mesh
            geometry={nodes.Plane005.geometry}
            material={materials["Material #46"]}
            position={[-3.73, -1.01, 0.78]}
            rotation={[-1.59, 0.88, -2.75]}
            scale={0.01}
            castShadow
            receiveShadow
          >
            <MeshWobbleMaterial
              attach="material"
              factor={0.00075}
              speed={3}
              color="#b2a99b"
            />
          </mesh>
        </group>
      )} */}
    </>
  );
};

export default Hand;
