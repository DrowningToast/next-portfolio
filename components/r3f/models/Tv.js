/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { Suspense, useEffect, useRef } from "react";
import {
  Float,
  Html,
  MeshWobbleMaterial,
  TransformControls,
  useGLTF,
} from "@react-three/drei";
import Image from "next/image";
import { AnimatePresence, motion, MotionConfig } from "framer-motion";

export default function Tv({ ...props }) {
  const group = useRef();
  const model = useRef();
  const screen = useRef();
  const el = useRef();

  useEffect(() => {
    if (el.current) {
      el.current.updateMatrix();
    }
  }, [props.width]);

  const { nodes, materials } = useGLTF("/assets/models/tv.gltf");
  return (
    <group ref={group} {...props} dispose={null}>
      {model?.current && (
        <spotLight
          position={[10, 10, 10]}
          angle={0.15}
          penumbra={1}
          shadow-mapSize={[512, 512]}
          castShadow
          target={model.current}
        />
      )}
      <group ref={model}>
        <mesh
          geometry={nodes.Television_01.geometry}
          // material={materials.Television_01}
        >
          <MeshWobbleMaterial
            color="#d4e5df"
            factor={!props.isMobile ? 0.08 : 0}
            speed={!props.isMobile ? 1.5 : 0}
          />
        </mesh>
        <mesh geometry={nodes.Television_01001.geometry} />
        <mesh ref={screen} geometry={nodes.screen.geometry}>
          <meshPhysicalMaterial
            color="black"
            roughness={0.35}
            thickness={0}
            envMapIntensity={4.7}
            transmission={0.2}
          />
        </mesh>

        <mesh
          geometry={nodes.Cube.geometry}
          // material={nodes.Cube.material}
          position={[0, 0.03, 0]}
          scale={0.03}
        >
          <meshPhysicalMaterial
            color="aquamarine"
            roughness={0}
            thickness={0}
            envMapIntensity={4.7}
            transmission={1}
          />
        </mesh>
        <mesh
          geometry={nodes.Cylinder001.geometry}
          // material={nodes.Cylinder001.material}
          position={[0.21, 0.35, 0.18]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={[0.04, 0.03, 0.04]}
        >
          <meshPhysicalMaterial
            color="#2c3f96"
            roughness={0}
            thickness={0}
            envMapIntensity={4.7}
            transmission={1}
          />
        </mesh>
        <mesh
          geometry={nodes.Cylinder002.geometry}
          // material={nodes.Cylinder002.material}
          position={[0.21, 0.27, 0.18]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={[0.04, 0.03, 0.04]}
        >
          <meshPhysicalMaterial
            color="#2c3f96"
            roughness={0}
            thickness={0}
            envMapIntensity={4.7}
            transmission={1}
          />
        </mesh>
        <mesh
          geometry={nodes.Cylinder003.geometry}
          // material={nodes.Cylinder003.material}
          position={[0.25, 0.2, 0.19]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.01}
        >
          <meshPhysicalMaterial
            color="#2c3f96"
            roughness={0}
            thickness={0}
            envMapIntensity={4.7}
            transmission={1}
          />
        </mesh>
      </group>
      <Suspense fallback={null}>
        <group position={[-0.065, 0.26, 0.2]} ref={el}>
          <Html scale={0.09} rotation={[0, 0, 0]} transform occlude center>
            <MotionConfig
              transition={{
                duration: 0.2,
                delay: 0,
              }}
            >
              <motion.div className="w-34 h-28 flex justify-center items-center flex-col relative">
                <AnimatePresence exitBeforeEnter>
                  {props.selected === null && (
                    <>
                      <motion.h2
                        key="title"
                        initial={{
                          opacity: 0,
                        }}
                        animate={{
                          opacity: 1,
                        }}
                        exit={{
                          opacity: 0,
                        }}
                        className="text-center text-xs"
                      >
                        Let's create something together
                      </motion.h2>
                      <motion.h1
                        key="sub"
                        initial={{
                          opacity: 0,
                        }}
                        animate={{
                          opacity: 1,
                        }}
                        exit={{
                          opacity: 0,
                        }}
                        className="text-2xl pointer-events-none"
                      >
                        Get in touch!
                      </motion.h1>
                    </>
                  )}
                  {props.selected === "github" && (
                    <motion.div
                      key="github"
                      initial={{
                        opacity: 0,
                      }}
                      animate={{
                        opacity: 1,
                      }}
                      exit={{
                        opacity: 0,
                      }}
                    >
                      <Image
                        className="pointer-events-none"
                        width={64}
                        height={64}
                        src="/assets/png/Github.png"
                      />
                    </motion.div>
                  )}
                  {props.selected === "linkedin" && (
                    <motion.div
                      key="linkedin"
                      initial={{
                        opacity: 0,
                      }}
                      animate={{
                        opacity: 1,
                      }}
                      exit={{
                        opacity: 0,
                      }}
                    >
                      <Image
                        width={64}
                        className="pointer-events-none"
                        height={64}
                        src="/assets/png/LinkedIn.png"
                      />
                    </motion.div>
                  )}
                </AnimatePresence>
              </motion.div>
            </MotionConfig>
          </Html>
        </group>
      </Suspense>
    </group>
  );
}

useGLTF.preload("/assets/models/tv.gltf");
